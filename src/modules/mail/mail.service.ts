import { Injectable } from '@nestjs/common';
import { MailerService } from '@nestjs-modules/mailer';
import { ApplyStatus } from '../../utils/enum/apply-status.enum';

@Injectable()
export class MailService {
  constructor(private mailerService: MailerService) {}

  async sendMail(email: string, username: string, code: string) {
    await this.mailerService.sendMail({
      to: `${email}`,
      subject: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç',
      template: './confirmation',
      html: `<p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${username}!</p>
             <p>–í–∞—à –∫–æ–¥ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ${code}</p>
             <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ –µ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.</p>`,
      // context: {
      //   username: username,
      //   url: confirmLink,
      // },
    });
  }

  async sendResponseForUsersFeedback(email: string, content: string) {
    try {
      const mailOptions = {
        to: email,
        subject: '–û—Ç–≤–µ—Ç –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –æ—Ç GirlsForGirls',
        html: content,
      };
      await this.mailerService.sendMail(mailOptions);
    } catch (error) {
      throw new Error('Error');
    }
  }

  async sendResponseEmailForApplication(
    email: string,
    applyStatus: string,
    program: string,
  ) {
    let response;
    if (applyStatus === ApplyStatus.APPROVED) {
      response = `
        <h2>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å!</h2>
        <p>–í–∞—à–∞ –ø–æ–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É ${program} –æ–¥–æ–±—Ä–µ–Ω–∞ üéâüéâüéâ</p>
      `;
    } else {
      response = `
        <h3>–î–æ–±—Ä—ã–π –¥–µ–Ω—å!</h3>
        <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–∞—à–∞ –ø–æ–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É ${program} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</p>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π üí™</p>
      `;
    }

    try {
      const mailOptions = {
        to: email,
        subject: '–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –ø–æ–¥–∞—á—É –æ—Ç Girls4Girls',
        html: response,
      };
      await this.mailerService.sendMail(mailOptions);
    } catch (e) {
      throw new Error(e.message);
    }
  }
}
